# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

apple_id = CredentialsManager::AppfileConfig.try_fetch_value(:apple_id)
bundle_id = ''
team_id = ''
configuration = ''

app_name = ENV['APP_NAME']
scheme = ENV['SCHEME']
extensions = ENV['EXTENSIONS'].split(",").zip(ENV['EXTENSIONS_SERVICES'].split(","))
services = ENV['SERVICES']

default_platform :ios

platform :ios do

  desc "Make the IPA"
  lane :makeIPA do |options|
    enterprise = ENV["MATCH_FORCE_ENTERPRISE"] ? true : false
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    bundle_id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    if options[:suffix] then
      bundle_id["enterprise"] = options[:suffix]
    end
    configuration = options[:configuration]
    produceIPA()
    signIPA()
    buildIPA()
  end

  desc "Produce the IPA"
  lane :produceIPA do |options|
    privateProduceIPA(options: options)
    extensions.each do |extension, services|
      privateProduceIPA(options: options, extension: extension, services: services)
    end
  end

  desc "Produce the IPA"
  private_lane :privateProduceIPA do |options|

    suffix = ""
    if options[:extension] then
        suffix = "." + options[:extension] + "Extension"
    end

    path = ""
    if options[:extension] then
        path = options[:extension] + "Extension/"
    else
        path = app_name + "-"
    end

    update_app_identifier(
    app_identifier: bundle_id + suffix,
    plist_path: path + "Info.plist"
    )

    if options[:extension] then
        update_app_group_identifiers(
        entitlements_file: path + options[:extension] + "Extension.entitlements",
  	    app_group_identifiers: ['group.' + bundle_id]
        )
    end

  end

  desc "Sign the IPA"
  lane :signIPA do |options|
    privateSignIPA(options: options)
    extensions.each do |extension, services|
      privateSignIPA(options: options, extension: extension)
    end
  end

  desc "Sign the IPA"
  private_lane :privateSignIPA do |options|
    automatic_code_signing(
    path: app_name + ".xcodeproj",
    use_automatic_signing: false,
    team_id: team_id,
    targets: options[:extension] ? options[:extension] + "Extension" : app_name
    )

    _git_branch = ENV["MATCH_FORCE_ENTERPRISE"] ? "enterprise" : "master"
    suffix = options[:extension] ? suffix = "." + options[:extension] + "Extension" : ""

    match(
    git_url: ENV['MATCH_URL'],
    type: "development",
    readonly: true,
    git_branch: _git_branch,
    username: apple_id,
    app_identifier: bundle_id + suffix
    )

    match(
    git_url: ENV['MATCH_URL'],
    type: "appstore",
    readonly: true,
    git_branch: _git_branch,
    username: apple_id,
    app_identifier: bundle_id + suffix
    )

    type = options[:development] ? "development" : "appstore"
    path = "sigh_" + bundle_id + suffix + "_" + type + "_profile-path"

    update_project_provisioning_profile(
    xcodeproj: app_name + ".xcodeproj",
    profile: ENV[path],
    target_filter: options[:extension] ? options[:extension] + "Extension" : app_name,
    build_configuration: options[:configuration]
    )
  end

  desc "Build the IPA"
  lane :buildIPA do |options|

    update_project_team(path: app_name + ".xcodeproj", teamid: team_id)

    _export_method = "app-store"
    _export_method = options[:adhoc] ? "adhoc" : _export_method
    _export_method = options[:development] ? "development" : _export_method
    _export_method = ENV["MATCH_FORCE_ENTERPRISE"] ? "enterprise" : _export_method

    _icloud_environment = "Production"
    _icloud_environment = options[:development] ? "Development" : _icloud_environment

    gym(
    workspace: app_name + ".xcworkspace",
    configuration: (options[:configuration]),
    export_method: _export_method,
    scheme: scheme,
    silent: true,
    clean: true,
    output_name: app_name,
    export_xcargs: "-allowProvisioningUpdates",
    export_options: ({ iCloudContainerEnvironment: _icloud_environment })
    )

  end

end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/docs/Actions.md
